#pragma once

#include <Windows.h>
#include <wrl.h>
#include <d3d12.h>
#include <d3dx12.h>
#include <DirectXMath.h>
#include <string>

#include "Model.h"
#include "Camera.h"

//3Dオブジェクト
class Object3d
{
protected://エイリアス
	//Microsoft::WRL::を省略
	template <class T> using ComPtr = Microsoft::WRL::ComPtr<T>;
	//DirectX::を省略
	using XMFLOAT2 = DirectX::XMFLOAT2;
	using XMFLOAT3 = DirectX::XMFLOAT3;
	using XMFLOAT4 = DirectX::XMFLOAT4;
	using XMMATRIX = DirectX::XMMATRIX;

public://サブクラス
	//定数バッファ用データ構造体(座標変換行列用)
	struct ConstBufferDataTransform
	{
		XMMATRIX viewproj;//ビュープロジェクション行列
		XMMATRIX world;//ワールド行列
		XMFLOAT3 cameraPos;//カメラ座標(ワールド座標)
	};

public://静的メンバ関数
	//setter
	static void SetDevice(ID3D12Device* dev) { Object3d::dev = dev; }
	static void SetCamera(Camera* camera) { Object3d::camera = camera; }
	//グラフィックスパイプラインの生成
	static void CreateGraphicsPipeline();

private://静的メンバ変数
	//デバイス
	static ID3D12Device* dev;
	//カメラ
	static Camera* camera;
	//ルートシグネチャ
	static ComPtr<ID3D12RootSignature> rootsignature;
	//パイプラインステートオブジェクト
	static ComPtr<ID3D12PipelineState> pipelinestate;

public://メンバ関数
	//初期化処理
	void Initialize();
	//更新処理
	void Update();
	//描画処理
	void Draw(ID3D12GraphicsCommandList* cmdList);
	//モデルのセット
	void SetModel(Model* model) { this->model = model; }
	//座標の取得
	const XMFLOAT3& GetPosition() { return position; }
	//座標の設定
	void SetPosition(XMFLOAT3 position) { this->position = position; }
	//回転の取得
	const XMFLOAT3& GetRotation() { return rotation; }
	//回転の設定
	void SetRotation(XMFLOAT3 rotation) { this->rotation = rotation; }
	//スケールの取得
	const XMFLOAT3& GetScale() { return scale; }
	//スケールの設定
	void SetScale(XMFLOAT3 scale) { this->scale = scale; }

protected://メンバ変数
	//定数バッファ
	ComPtr<ID3D12Resource> constBuffTransform;
	//ローカルスケール
	XMFLOAT3 scale = { 1, 1, 1 };
	//X, Y, Z軸回りのローカル回転角
	XMFLOAT3 rotation = { 0, 0, 0 };
	//ローカル座標
	XMFLOAT3 position = { 0, 0, 0 };
	//ローカルワールド変換行列
	XMMATRIX matworld;
	//モデル
	Model* model = nullptr;
};